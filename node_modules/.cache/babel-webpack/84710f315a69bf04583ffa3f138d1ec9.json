{"ast":null,"code":"import _regeneratorRuntime from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { p as pointerCoord } from './helpers-5c745fbd.js';\nvar cloneMap = new WeakMap();\n\nvar relocateInput = function relocateInput(componentEl, inputEl, shouldRelocate) {\n  var inputRelativeY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\n\nvar isFocused = function isFocused(input) {\n  return input === input.getRootNode().activeElement;\n};\n\nvar addClone = function addClone(componentEl, inputEl, inputRelativeY) {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  var parentEl = inputEl.parentNode; // DOM WRITES\n\n  var clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  var doc = componentEl.ownerDocument;\n  var tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = \"translate3d(\".concat(tx, \"px,\").concat(inputRelativeY, \"px,0) scale(0)\");\n};\n\nvar removeClone = function removeClone(componentEl, inputEl) {\n  var clone = cloneMap.get(componentEl);\n\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nvar enableHideCaretOnScroll = function enableHideCaretOnScroll(componentEl, inputEl, scrollEl) {\n  if (!scrollEl || !inputEl) {\n    return function () {\n      return;\n    };\n  }\n\n  var scrollHideCaret = function scrollHideCaret(shouldHideCaret) {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n\n  var onBlur = function onBlur() {\n    return relocateInput(componentEl, inputEl, false);\n  };\n\n  var hideCaret = function hideCaret() {\n    return scrollHideCaret(true);\n  };\n\n  var showCaret = function showCaret() {\n    return scrollHideCaret(false);\n  };\n\n  scrollEl.addEventListener('ionScrollStart', hideCaret);\n  scrollEl.addEventListener('ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return function () {\n    scrollEl.removeEventListener('ionScrollStart', hideCaret);\n    scrollEl.removeEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nvar SKIP_SELECTOR = 'input, textarea, [no-blur]';\n\nvar enableInputBlurring = function enableInputBlurring() {\n  var focused = true;\n  var didScroll = false;\n  var doc = document;\n\n  var onScroll = function onScroll() {\n    didScroll = true;\n  };\n\n  var onFocusin = function onFocusin() {\n    focused = true;\n  };\n\n  var onTouchend = function onTouchend(ev) {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n\n    var active = doc.activeElement;\n\n    if (!active) {\n      return;\n    } // only blur if the active element is a text-input or a textarea\n\n\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    } // if the selected target is the active element, do not blur\n\n\n    var tapped = ev.target;\n\n    if (tapped === active) {\n      return;\n    }\n\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n\n    focused = false; // TODO: find a better way, why 50ms?\n\n    setTimeout(function () {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n\n  doc.addEventListener('ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return function () {\n    doc.removeEventListener('ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nvar SCROLL_ASSIST_SPEED = 0.3;\n\nvar getScrollData = function getScrollData(componentEl, contentEl, keyboardHeight) {\n  var itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\n\nvar calcScrollData = function calcScrollData(inputRect, contentRect, keyboardHeight, platformHeight) {\n  // compute input's Y values relative to the body\n  var inputTop = inputRect.top;\n  var inputBottom = inputRect.bottom; // compute visible area\n\n  var visibleAreaTop = contentRect.top;\n  var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight); // compute safe area\n\n  var safeAreaTop = visibleAreaTop + 15;\n  var safeAreaBottom = visibleAreaBottom - 15; // figure out if each edge of the input is within the safe area\n\n  var distanceToBottom = safeAreaBottom - inputBottom;\n  var distanceToTop = safeAreaTop - inputTop; // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n\n  var desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0); // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n\n  var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  var distance = Math.abs(scrollAmount);\n  var duration = distance / SCROLL_ASSIST_SPEED;\n  var scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount: scrollAmount,\n    scrollDuration: scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\n\nvar enableScrollAssist = function enableScrollAssist(componentEl, inputEl, contentEl, footerEl, keyboardHeight) {\n  var coord;\n\n  var touchStart = function touchStart(ev) {\n    coord = pointerCoord(ev);\n  };\n\n  var touchEnd = function touchEnd(ev) {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    } // get where the touchend/mouseup ended\n\n\n    var endCoord = pointerCoord(ev); // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      ev.preventDefault();\n      ev.stopPropagation(); // begin the input focus process\n\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n    }\n  };\n\n  componentEl.addEventListener('touchstart', touchStart, true);\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return function () {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\n\nvar jsSetFocus = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(componentEl, inputEl, contentEl, footerEl, keyboardHeight) {\n    var scrollData, scrollContentTimeout, scrollContent, doubleKeyboardEventListener, scrollEl, totalScrollAmount;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(!contentEl && !footerEl)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            scrollData = getScrollData(componentEl, contentEl || footerEl, keyboardHeight);\n\n            if (!(contentEl && Math.abs(scrollData.scrollAmount) < 4)) {\n              _context2.next = 6;\n              break;\n            }\n\n            // the text input is in a safe position that doesn't\n            // require it to be scrolled into view, just set focus now\n            inputEl.focus();\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            // temporarily move the focus to the focus holder so the browser\n            // doesn't freak out while it's trying to get the input in place\n            // at this point the native text input still does not have focus\n            relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n            inputEl.focus();\n            /* tslint:disable-next-line */\n\n            if (!(typeof window !== 'undefined')) {\n              _context2.next = 21;\n              break;\n            }\n\n            scrollContent = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        // clean up listeners and timeouts\n                        if (scrollContentTimeout !== undefined) {\n                          clearTimeout(scrollContentTimeout);\n                        }\n\n                        window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n                        window.removeEventListener('ionKeyboardDidShow', scrollContent); // scroll the input into place\n\n                        if (!contentEl) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        _context.next = 6;\n                        return contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n\n                      case 6:\n                        // the scroll view is in the correct position now\n                        // give the native text input focus\n                        relocateInput(componentEl, inputEl, false, scrollData.inputSafeY); // ensure this is the focused input\n\n                        inputEl.focus();\n\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function scrollContent() {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            doubleKeyboardEventListener = function doubleKeyboardEventListener() {\n              window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n              window.addEventListener('ionKeyboardDidShow', scrollContent);\n            };\n\n            if (!contentEl) {\n              _context2.next = 20;\n              break;\n            }\n\n            _context2.next = 14;\n            return contentEl.getScrollElement();\n\n          case 14:\n            scrollEl = _context2.sent;\n\n            /**\n             * scrollData will only consider the amount we need\n             * to scroll in order to properly bring the input\n             * into view. It will not consider the amount\n             * we can scroll in the content element.\n             * As a result, scrollData may request a greater\n             * scroll position than is currently available\n             * in the DOM. If this is the case, we need to\n             * wait for the webview to resize/the keyboard\n             * to show in order for additional scroll\n             * bandwidth to become available.\n             */\n            totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n\n            if (!(scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop)) {\n              _context2.next = 20;\n              break;\n            }\n\n            /**\n             * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n             * after the initial keyboard is shown. This prevents the webview from resizing\n             * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n             */\n            if (inputEl.type === 'password') {\n              // Add 50px to account for the \"Passwords\" bar\n              scrollData.scrollAmount += 50;\n              window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            } else {\n              window.addEventListener('ionKeyboardDidShow', scrollContent);\n            }\n            /**\n             * This should only fire in 2 instances:\n             * 1. The app is very slow.\n             * 2. The app is running in a browser on an old OS\n             * that does not support Ionic Keyboard Events\n             */\n\n\n            scrollContentTimeout = setTimeout(scrollContent, 1000);\n            return _context2.abrupt(\"return\");\n\n          case 20:\n            scrollContent();\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function jsSetFocus(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar hasPointerMoved = function hasPointerMoved(threshold, startCoord, endCoord) {\n  if (startCoord && endCoord) {\n    var deltaX = startCoord.x - endCoord.x;\n    var deltaY = startCoord.y - endCoord.y;\n    var distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n\n  return false;\n};\n\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\n\nvar enableScrollPadding = function enableScrollPadding(keyboardHeight) {\n  var doc = document;\n\n  var onFocusin = function onFocusin(ev) {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n\n  var onFocusout = function onFocusout(ev) {\n    setScrollPadding(ev.target, 0);\n  };\n\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return function () {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\n\nvar setScrollPadding = function setScrollPadding(input, keyboardHeight) {\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n\n  if (input.parentElement && input.parentElement.parentElement && input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n    return;\n  }\n\n  var el = input.closest('ion-content');\n\n  if (el === null) {\n    return;\n  }\n\n  var timer = el[PADDING_TIMER_KEY];\n\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', \"\".concat(keyboardHeight, \"px\"));\n  } else {\n    el[PADDING_TIMER_KEY] = setTimeout(function () {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nvar INPUT_BLURRING = true;\nvar SCROLL_PADDING = true;\n\nvar startInputShims = function startInputShims(config) {\n  var doc = document;\n  var keyboardHeight = config.getNumber('keyboardHeight', 290);\n  var scrollAssist = config.getBoolean('scrollAssist', true);\n  var hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  var inputBlurring = config.getBoolean('inputBlurring', true);\n  var scrollPadding = config.getBoolean('scrollPadding', true);\n  var inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  var hideCaretMap = new WeakMap();\n  var scrollAssistMap = new WeakMap();\n\n  var registerInput = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(componentEl) {\n      var inputRoot, inputEl, scrollEl, footerEl, rmFn, _rmFn;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!componentEl.componentOnReady) {\n                _context3.next = 3;\n                break;\n              }\n\n              _context3.next = 3;\n              return componentEl.componentOnReady();\n\n            case 3:\n              inputRoot = componentEl.shadowRoot || componentEl;\n              inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n              scrollEl = componentEl.closest('ion-content');\n              footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n\n              if (inputEl) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 9:\n              if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n                rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n                hideCaretMap.set(componentEl, rmFn);\n              }\n\n              if ((!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n                _rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n                scrollAssistMap.set(componentEl, _rmFn);\n              }\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function registerInput(_x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var unregisterInput = function unregisterInput(componentEl) {\n    if (hideCaret) {\n      var fn = hideCaretMap.get(componentEl);\n\n      if (fn) {\n        fn();\n      }\n\n      hideCaretMap.delete(componentEl);\n    }\n\n    if (scrollAssist) {\n      var _fn = scrollAssistMap.get(componentEl);\n\n      if (_fn) {\n        _fn();\n      }\n\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  } // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n\n\n  for (var _i = 0, _inputs = inputs; _i < _inputs.length; _i++) {\n    var input = _inputs[_i];\n    registerInput(input);\n  }\n\n  doc.addEventListener('ionInputDidLoad', function (ev) {\n    registerInput(ev.detail);\n  });\n  doc.addEventListener('ionInputDidUnload', function (ev) {\n    unregisterInput(ev.detail);\n  });\n};\n\nexport { startInputShims };","map":{"version":3,"sources":["C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@ionic/core/dist/esm/input-shims-b956f530.js"],"names":["p","pointerCoord","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","enableScrollAssist","footerEl","coord","touchStart","touchEnd","endCoord","hasPointerMoved","preventDefault","stopPropagation","jsSetFocus","scrollData","focus","window","scrollContent","scrollContentTimeout","undefined","clearTimeout","doubleKeyboardEventListener","scrollByPoint","getScrollElement","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","threshold","startCoord","deltaX","x","deltaY","y","PADDING_TIMER_KEY","enableScrollPadding","setScrollPadding","onFocusout","tagName","parentElement","el","timer","setProperty","INPUT_BLURRING","SCROLL_PADDING","startInputShims","config","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","unregisterInput","fn","detail"],"mappings":"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","sourcesContent":["import { p as pointerCoord } from './helpers-5c745fbd.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nconst isFocused = (input) => {\n    return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    const parentEl = inputEl.parentNode;\n    // DOM WRITES\n    const clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    const doc = componentEl.ownerDocument;\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n    const clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n    if (!scrollEl || !inputEl) {\n        return () => { return; };\n    }\n    const scrollHideCaret = (shouldHideCaret) => {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\n    const hideCaret = () => scrollHideCaret(true);\n    const showCaret = () => scrollHideCaret(false);\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return () => {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur]';\nconst enableInputBlurring = () => {\n    let focused = true;\n    let didScroll = false;\n    const doc = document;\n    const onScroll = () => {\n        didScroll = true;\n    };\n    const onFocusin = () => {\n        focused = true;\n    };\n    const onTouchend = (ev) => {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        const active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        const tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO: find a better way, why 50ms?\n        setTimeout(() => {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return () => {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n    const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n    // compute input's Y values relative to the body\n    const inputTop = inputRect.top;\n    const inputBottom = inputRect.bottom;\n    // compute visible area\n    const visibleAreaTop = contentRect.top;\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    const safeAreaTop = visibleAreaTop + 15;\n    const safeAreaBottom = visibleAreaBottom - 15;\n    // figure out if each edge of the input is within the safe area\n    const distanceToBottom = safeAreaBottom - inputBottom;\n    const distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    const desiredScrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    const distance = Math.abs(scrollAmount);\n    const duration = distance / SCROLL_ASSIST_SPEED;\n    const scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount,\n        scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n    let coord;\n    const touchStart = (ev) => {\n        coord = pointerCoord(ev);\n    };\n    const touchEnd = (ev) => {\n        // input cover touchend/mouseup\n        if (!coord) {\n            return;\n        }\n        // get where the touchend/mouseup ended\n        const endCoord = pointerCoord(ev);\n        // focus this input if the pointer hasn't moved XX pixels\n        // and the input doesn't already have focus\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // begin the input focus process\n            jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return () => {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n    if (!contentEl && !footerEl) {\n        return;\n    }\n    const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        inputEl.focus();\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    /* tslint:disable-next-line */\n    if (typeof window !== 'undefined') {\n        let scrollContentTimeout;\n        const scrollContent = async () => {\n            // clean up listeners and timeouts\n            if (scrollContentTimeout !== undefined) {\n                clearTimeout(scrollContentTimeout);\n            }\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.removeEventListener('ionKeyboardDidShow', scrollContent);\n            // scroll the input into place\n            if (contentEl) {\n                await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n            }\n            // the scroll view is in the correct position now\n            // give the native text input focus\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n            // ensure this is the focused input\n            inputEl.focus();\n        };\n        const doubleKeyboardEventListener = () => {\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n        };\n        if (contentEl) {\n            const scrollEl = await contentEl.getScrollElement();\n            /**\n             * scrollData will only consider the amount we need\n             * to scroll in order to properly bring the input\n             * into view. It will not consider the amount\n             * we can scroll in the content element.\n             * As a result, scrollData may request a greater\n             * scroll position than is currently available\n             * in the DOM. If this is the case, we need to\n             * wait for the webview to resize/the keyboard\n             * to show in order for additional scroll\n             * bandwidth to become available.\n             */\n            const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n            if (scrollData.scrollAmount > (totalScrollAmount - scrollEl.scrollTop)) {\n                /**\n                 * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n                 * after the initial keyboard is shown. This prevents the webview from resizing\n                 * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n                 */\n                if (inputEl.type === 'password') {\n                    // Add 50px to account for the \"Passwords\" bar\n                    scrollData.scrollAmount += 50;\n                    window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n                }\n                else {\n                    window.addEventListener('ionKeyboardDidShow', scrollContent);\n                }\n                /**\n                 * This should only fire in 2 instances:\n                 * 1. The app is very slow.\n                 * 2. The app is running in a browser on an old OS\n                 * that does not support Ionic Keyboard Events\n                 */\n                scrollContentTimeout = setTimeout(scrollContent, 1000);\n                return;\n            }\n        }\n        scrollContent();\n    }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n    if (startCoord && endCoord) {\n        const deltaX = (startCoord.x - endCoord.x);\n        const deltaY = (startCoord.y - endCoord.y);\n        const distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n    const doc = document;\n    const onFocusin = (ev) => {\n        setScrollPadding(ev.target, keyboardHeight);\n    };\n    const onFocusout = (ev) => {\n        setScrollPadding(ev.target, 0);\n    };\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return () => {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    if (input.parentElement &&\n        input.parentElement.parentElement &&\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n        return;\n    }\n    const el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    const timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(() => {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n    const doc = document;\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    const inputBlurring = config.getBoolean('inputBlurring', true);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    const registerInput = async (componentEl) => {\n        if (componentEl.componentOnReady) {\n            await componentEl.componentOnReady();\n        }\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = componentEl.closest('ion-content');\n        const footerEl = (!scrollEl) ? componentEl.closest('ion-footer') : null;\n        if (!inputEl) {\n            return;\n        }\n        if ( !!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if ( (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    const unregisterInput = (componentEl) => {\n        if ( hideCaret) {\n            const fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if ( scrollAssist) {\n            const fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(keyboardHeight);\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', ((ev) => {\n        registerInput(ev.detail);\n    }));\n    doc.addEventListener('ionInputDidUnload', ((ev) => {\n        unregisterInput(ev.detail);\n    }));\n};\n\nexport { startInputShims };\n"]},"metadata":{},"sourceType":"module"}