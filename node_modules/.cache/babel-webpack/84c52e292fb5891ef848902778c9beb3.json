{"ast":null,"code":"import { C as CSS, p as plt, w as win, a as promiseResolve, d as doc, N as NAMESPACE } from './index-44bf8136.js';\nimport { a as appGlobalScript } from './ionic-global-837be8f3.js';\n/*\n Stencil Client Patch v1.17.1 | MIT Licensed | https://stenciljs.com\n */\n\nvar noop = function noop() {\n  /* noop*/\n};\n\nvar IS_DENO_ENV = typeof Deno !== 'undefined';\nvar IS_NODE_ENV = !IS_DENO_ENV && typeof global !== 'undefined' && typeof require === 'function' && !!global.process && typeof __filename === 'string' && (!global.origin || typeof global.origin !== 'string');\nvar IS_DENO_WINDOWS_ENV = IS_DENO_ENV && Deno.build.os === 'windows';\nvar getCurrentDirectory = IS_NODE_ENV ? process.cwd : IS_DENO_ENV ? Deno.cwd : function () {\n  return '/';\n};\nvar exit = IS_NODE_ENV ? process.exit : IS_DENO_ENV ? Deno.exit : noop;\n\nvar getDynamicImportFunction = function getDynamicImportFunction(namespace) {\n  return \"__sc_import_\".concat(namespace.replace(/\\s|-/g, '_'));\n};\n\nvar patchEsm = function patchEsm() {\n  // NOTE!! This fn cannot use async/await!\n  // @ts-ignore\n  if (!(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n    // @ts-ignore\n    return import(\n    /* webpackChunkName: \"polyfills-css-shim\" */\n    './css-shim-8d8ae078.js').then(function () {\n      if (plt.$cssShim$ = win.__cssshim) {\n        return plt.$cssShim$.i();\n      } else {\n        // for better minification\n        return 0;\n      }\n    });\n  }\n\n  return promiseResolve();\n};\n\nvar patchBrowser = function patchBrowser() {\n  {\n    // shim css vars\n    plt.$cssShim$ = win.__cssshim;\n  } // @ts-ignore\n\n  var scriptElm = Array.from(doc.querySelectorAll('script')).find(function (s) {\n    return new RegExp(\"/\".concat(NAMESPACE, \"(\\\\.esm)?\\\\.js($|\\\\?|#)\")).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE;\n  });\n  var opts = scriptElm['data-opts'] || {};\n\n  if ('onbeforeload' in scriptElm && !history.scrollRestoration\n  /* IS_ESM_BUILD */\n  ) {\n      // Safari < v11 support: This IF is true if it's Safari below v11.\n      // This fn cannot use async/await since Safari didn't support it until v11,\n      // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n      // so both the ESM file and nomodule file would get downloaded. Only Safari\n      // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n      // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n      // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n      return {\n        then: function then() {\n          /* promise noop */\n        }\n      };\n    }\n\n  {\n    opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n    {\n      patchDynamicImport(opts.resourcesUrl, scriptElm);\n    }\n\n    if (!win.customElements) {\n      // module support, but no custom elements support (Old Edge)\n      // @ts-ignore\n      return import(\n      /* webpackChunkName: \"polyfills-dom\" */\n      './dom-5f2688df.js').then(function () {\n        return opts;\n      });\n    }\n  }\n  return promiseResolve(opts);\n};\n\nvar patchDynamicImport = function patchDynamicImport(base, orgScriptElm) {\n  var importFunctionName = getDynamicImportFunction(NAMESPACE);\n\n  try {\n    // test if this browser supports dynamic imports\n    // There is a caching issue in V8, that breaks using import() in Function\n    // By generating a random string, we can workaround it\n    // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n    win[importFunctionName] = new Function('w', \"return import(w);//\".concat(Math.random()));\n  } catch (e) {\n    // this shim is specifically for browsers that do support \"esm\" imports\n    // however, they do NOT support \"dynamic\" imports\n    // basically this code is for old Edge, v18 and below\n    var moduleMap = new Map();\n\n    win[importFunctionName] = function (src) {\n      var url = new URL(src, base).href;\n      var mod = moduleMap.get(url);\n\n      if (!mod) {\n        var script = doc.createElement('script');\n        script.type = 'module';\n        script.crossOrigin = orgScriptElm.crossOrigin;\n        script.src = URL.createObjectURL(new Blob([\"import * as m from '\".concat(url, \"'; window.\").concat(importFunctionName, \".m = m;\")], {\n          type: 'application/javascript'\n        }));\n        mod = new Promise(function (resolve) {\n          script.onload = function () {\n            resolve(win[importFunctionName].m);\n            script.remove();\n          };\n        });\n        moduleMap.set(url, mod);\n        doc.head.appendChild(script);\n      }\n\n      return mod;\n    };\n  }\n};\n\nvar globalScripts = appGlobalScript;\nexport { patchEsm as a, globalScripts as g, patchBrowser as p };","map":{"version":3,"sources":["C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@ionic/core/dist/esm/app-globals-b3cf90f0.js"],"names":["C","CSS","p","plt","w","win","a","promiseResolve","d","doc","N","NAMESPACE","appGlobalScript","noop","IS_DENO_ENV","Deno","IS_NODE_ENV","global","require","process","__filename","origin","IS_DENO_WINDOWS_ENV","build","os","getCurrentDirectory","cwd","exit","getDynamicImportFunction","namespace","replace","patchEsm","supports","then","$cssShim$","__cssshim","i","patchBrowser","scriptElm","Array","from","querySelectorAll","find","s","RegExp","test","src","getAttribute","opts","history","scrollRestoration","resourcesUrl","URL","location","href","patchDynamicImport","customElements","base","orgScriptElm","importFunctionName","Function","Math","random","e","moduleMap","Map","url","mod","get","script","createElement","type","crossOrigin","createObjectURL","Blob","Promise","resolve","onload","m","remove","set","head","appendChild","globalScripts","g"],"mappings":"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","sourcesContent":["import { C as CSS, p as plt, w as win, a as promiseResolve, d as doc, N as NAMESPACE } from './index-44bf8136.js';\nimport { a as appGlobalScript } from './ionic-global-837be8f3.js';\n\n/*\n Stencil Client Patch v1.17.1 | MIT Licensed | https://stenciljs.com\n */\nconst noop = () => {\n    /* noop*/\n};\nconst IS_DENO_ENV = typeof Deno !== 'undefined';\nconst IS_NODE_ENV = !IS_DENO_ENV &&\n    typeof global !== 'undefined' &&\n    typeof require === 'function' &&\n    !!global.process &&\n    typeof __filename === 'string' &&\n    (!global.origin || typeof global.origin !== 'string');\nconst IS_DENO_WINDOWS_ENV = IS_DENO_ENV && Deno.build.os === 'windows';\nconst getCurrentDirectory = IS_NODE_ENV ? process.cwd : IS_DENO_ENV ? Deno.cwd : () => '/';\nconst exit = IS_NODE_ENV ? process.exit : IS_DENO_ENV ? Deno.exit : noop;\nconst getDynamicImportFunction = (namespace) => `__sc_import_${namespace.replace(/\\s|-/g, '_')}`;\nconst patchEsm = () => {\n    // NOTE!! This fn cannot use async/await!\n    // @ts-ignore\n    if ( !(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n        // @ts-ignore\n        return import(/* webpackChunkName: \"polyfills-css-shim\" */ './css-shim-8d8ae078.js').then(() => {\n            if ((plt.$cssShim$ = win.__cssshim)) {\n                return plt.$cssShim$.i();\n            }\n            else {\n                // for better minification\n                return 0;\n            }\n        });\n    }\n    return promiseResolve();\n};\nconst patchBrowser = () => {\n    {\n        // shim css vars\n        plt.$cssShim$ = win.__cssshim;\n    }\n    // @ts-ignore\n    const scriptElm =  Array.from(doc.querySelectorAll('script')).find(s => new RegExp(`\\/${NAMESPACE}(\\\\.esm)?\\\\.js($|\\\\?|#)`).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE)\n        ;\n    const opts =  scriptElm['data-opts'] || {} ;\n    if ( 'onbeforeload' in scriptElm && !history.scrollRestoration /* IS_ESM_BUILD */) {\n        // Safari < v11 support: This IF is true if it's Safari below v11.\n        // This fn cannot use async/await since Safari didn't support it until v11,\n        // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n        // so both the ESM file and nomodule file would get downloaded. Only Safari\n        // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n        // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n        // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n        return {\n            then() {\n                /* promise noop */\n            },\n        };\n    }\n    {\n        opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n        {\n            patchDynamicImport(opts.resourcesUrl, scriptElm);\n        }\n        if ( !win.customElements) {\n            // module support, but no custom elements support (Old Edge)\n            // @ts-ignore\n            return import(/* webpackChunkName: \"polyfills-dom\" */ './dom-5f2688df.js').then(() => opts);\n        }\n    }\n    return promiseResolve(opts);\n};\nconst patchDynamicImport = (base, orgScriptElm) => {\n    const importFunctionName = getDynamicImportFunction(NAMESPACE);\n    try {\n        // test if this browser supports dynamic imports\n        // There is a caching issue in V8, that breaks using import() in Function\n        // By generating a random string, we can workaround it\n        // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n        win[importFunctionName] = new Function('w', `return import(w);//${Math.random()}`);\n    }\n    catch (e) {\n        // this shim is specifically for browsers that do support \"esm\" imports\n        // however, they do NOT support \"dynamic\" imports\n        // basically this code is for old Edge, v18 and below\n        const moduleMap = new Map();\n        win[importFunctionName] = (src) => {\n            const url = new URL(src, base).href;\n            let mod = moduleMap.get(url);\n            if (!mod) {\n                const script = doc.createElement('script');\n                script.type = 'module';\n                script.crossOrigin = orgScriptElm.crossOrigin;\n                script.src = URL.createObjectURL(new Blob([`import * as m from '${url}'; window.${importFunctionName}.m = m;`], { type: 'application/javascript' }));\n                mod = new Promise(resolve => {\n                    script.onload = () => {\n                        resolve(win[importFunctionName].m);\n                        script.remove();\n                    };\n                });\n                moduleMap.set(url, mod);\n                doc.head.appendChild(script);\n            }\n            return mod;\n        };\n    }\n};\n\nconst globalScripts = appGlobalScript;\n\nexport { patchEsm as a, globalScripts as g, patchBrowser as p };\n"]},"metadata":{},"sourceType":"module"}