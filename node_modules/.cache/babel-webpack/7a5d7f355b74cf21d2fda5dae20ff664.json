{"ast":null,"code":"import { c as writeTask } from './index-44bf8136.js';\nimport { createGesture } from './index-eea61379.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';\n\nvar createButtonActiveGesture = function createButtonActiveGesture(el, isButton) {\n  var currentTouchedButton;\n  var initialTouchedButton;\n\n  var activateButtonAtPoint = function activateButtonAtPoint(x, y, hapticFeedbackFn) {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    var target = document.elementFromPoint(x, y);\n\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n\n  var setActiveButton = function setActiveButton(button, hapticFeedbackFn) {\n    currentTouchedButton = button;\n\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n\n    var buttonToModify = currentTouchedButton;\n    writeTask(function () {\n      return buttonToModify.classList.add('ion-activated');\n    });\n    hapticFeedbackFn();\n  };\n\n  var clearActiveButton = function clearActiveButton() {\n    var dispatchClick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!currentTouchedButton) {\n      return;\n    }\n\n    var buttonToModify = currentTouchedButton;\n    writeTask(function () {\n      return buttonToModify.classList.remove('ion-activated');\n    });\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n\n    currentTouchedButton = undefined;\n  };\n\n  return createGesture({\n    el: el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: function onStart(ev) {\n      return activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart);\n    },\n    onMove: function onMove(ev) {\n      return activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged);\n    },\n    onEnd: function onEnd() {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\n\nexport { createButtonActiveGesture as c };","map":{"version":3,"sources":["C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@ionic/core/dist/esm/button-active-0d5784f9.js"],"names":["c","writeTask","createGesture","h","hapticSelectionEnd","a","hapticSelectionStart","b","hapticSelectionChanged","createButtonActiveGesture","el","isButton","currentTouchedButton","initialTouchedButton","activateButtonAtPoint","x","y","hapticFeedbackFn","document","target","elementFromPoint","clearActiveButton","setActiveButton","button","buttonToModify","classList","add","dispatchClick","remove","click","undefined","gestureName","threshold","onStart","ev","currentX","currentY","onMove","onEnd"],"mappings":"AAAA,SAASA,CAAC,IAAIC,SAAd,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,CAAC,IAAIC,kBAAd,EAAkCC,CAAC,IAAIC,oBAAvC,EAA6DC,CAAC,IAAIC,sBAAlE,QAAgG,sBAAhG;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,EAAD,EAAKC,QAAL,EAAkB;AAChD,MAAIC,oBAAJ;AACA,MAAIC,oBAAJ;;AACA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,gBAAP,EAA4B;AACtD,QAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACjC;AACH;;AACD,QAAMC,MAAM,GAAGD,QAAQ,CAACE,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,CAAf;;AACA,QAAI,CAACG,MAAD,IAAW,CAACR,QAAQ,CAACQ,MAAD,CAAxB,EAAkC;AAC9BE,MAAAA,iBAAiB;AACjB;AACH;;AACD,QAAIF,MAAM,KAAKP,oBAAf,EAAqC;AACjCS,MAAAA,iBAAiB;AACjBC,MAAAA,eAAe,CAACH,MAAD,EAASF,gBAAT,CAAf;AACH;AACJ,GAbD;;AAcA,MAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASN,gBAAT,EAA8B;AAClDL,IAAAA,oBAAoB,GAAGW,MAAvB;;AACA,QAAI,CAACV,oBAAL,EAA2B;AACvBA,MAAAA,oBAAoB,GAAGD,oBAAvB;AACH;;AACD,QAAMY,cAAc,GAAGZ,oBAAvB;AACAX,IAAAA,SAAS,CAAC;AAAA,aAAMuB,cAAc,CAACC,SAAf,CAAyBC,GAAzB,CAA6B,eAA7B,CAAN;AAAA,KAAD,CAAT;AACAT,IAAAA,gBAAgB;AACnB,GARD;;AASA,MAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,GAA2B;AAAA,QAA1BM,aAA0B,uEAAV,KAAU;;AACjD,QAAI,CAACf,oBAAL,EAA2B;AACvB;AACH;;AACD,QAAMY,cAAc,GAAGZ,oBAAvB;AACAX,IAAAA,SAAS,CAAC;AAAA,aAAMuB,cAAc,CAACC,SAAf,CAAyBG,MAAzB,CAAgC,eAAhC,CAAN;AAAA,KAAD,CAAT;AACA;;;;;;;;;AAQA,QAAID,aAAa,IAAId,oBAAoB,KAAKD,oBAA9C,EAAoE;AAChEA,MAAAA,oBAAoB,CAACiB,KAArB;AACH;;AACDjB,IAAAA,oBAAoB,GAAGkB,SAAvB;AACH,GAlBD;;AAmBA,SAAO5B,aAAa,CAAC;AACjBQ,IAAAA,EAAE,EAAFA,EADiB;AAEjBqB,IAAAA,WAAW,EAAE,kBAFI;AAGjBC,IAAAA,SAAS,EAAE,CAHM;AAIjBC,IAAAA,OAAO,EAAE,iBAAAC,EAAE;AAAA,aAAIpB,qBAAqB,CAACoB,EAAE,CAACC,QAAJ,EAAcD,EAAE,CAACE,QAAjB,EAA2B9B,oBAA3B,CAAzB;AAAA,KAJM;AAKjB+B,IAAAA,MAAM,EAAE,gBAAAH,EAAE;AAAA,aAAIpB,qBAAqB,CAACoB,EAAE,CAACC,QAAJ,EAAcD,EAAE,CAACE,QAAjB,EAA2B5B,sBAA3B,CAAzB;AAAA,KALO;AAMjB8B,IAAAA,KAAK,EAAE,iBAAM;AACTjB,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAjB,MAAAA,kBAAkB;AAClBS,MAAAA,oBAAoB,GAAGiB,SAAvB;AACH;AAVgB,GAAD,CAApB;AAYH,CAzDD;;AA2DA,SAASrB,yBAAyB,IAAIT,CAAtC","sourcesContent":["import { c as writeTask } from './index-44bf8136.js';\nimport { createGesture } from './index-eea61379.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n    let currentTouchedButton;\n    let initialTouchedButton;\n    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n        if (typeof document === 'undefined') {\n            return;\n        }\n        const target = document.elementFromPoint(x, y);\n        if (!target || !isButton(target)) {\n            clearActiveButton();\n            return;\n        }\n        if (target !== currentTouchedButton) {\n            clearActiveButton();\n            setActiveButton(target, hapticFeedbackFn);\n        }\n    };\n    const setActiveButton = (button, hapticFeedbackFn) => {\n        currentTouchedButton = button;\n        if (!initialTouchedButton) {\n            initialTouchedButton = currentTouchedButton;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.add('ion-activated'));\n        hapticFeedbackFn();\n    };\n    const clearActiveButton = (dispatchClick = false) => {\n        if (!currentTouchedButton) {\n            return;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.remove('ion-activated'));\n        /**\n         * Clicking on one button, but releasing on another button\n         * does not dispatch a click event in browsers, so we\n         * need to do it manually here. Some browsers will\n         * dispatch a click if clicking on one button, dragging over\n         * another button, and releasing on the original button. In that\n         * case, we need to make sure we do not cause a double click there.\n         */\n        if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n            currentTouchedButton.click();\n        }\n        currentTouchedButton = undefined;\n    };\n    return createGesture({\n        el,\n        gestureName: 'buttonActiveDrag',\n        threshold: 0,\n        onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n        onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n        onEnd: () => {\n            clearActiveButton(true);\n            hapticSelectionEnd();\n            initialTouchedButton = undefined;\n        }\n    });\n};\n\nexport { createButtonActiveGesture as c };\n"]},"metadata":{},"sourceType":"module"}