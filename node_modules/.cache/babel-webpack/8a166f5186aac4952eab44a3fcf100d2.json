{"ast":null,"code":"import _regeneratorRuntime from \"C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-44bf8136.js';\nvar CELL_TYPE_ITEM = 'item';\nvar CELL_TYPE_HEADER = 'header';\nvar CELL_TYPE_FOOTER = 'footer';\nvar NODE_CHANGE_NONE = 0;\nvar NODE_CHANGE_POSITION = 1;\nvar NODE_CHANGE_CELL = 2;\nvar MIN_READS = 2;\n\nvar updateVDom = function updateVDom(dom, heightIndex, cells, range) {\n  // reset dom\n  var _iterator = _createForOfIteratorHelper(dom),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n      node.change = NODE_CHANGE_NONE;\n      node.d = true;\n    } // try to match into exisiting dom\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var toMutate = [];\n  var end = range.offset + range.length;\n\n  var _loop = function _loop(i) {\n    var cell = cells[i];\n    var node = dom.find(function (n) {\n      return n.d && n.cell === cell;\n    });\n\n    if (node) {\n      var top = heightIndex[i];\n\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n\n      node.d = false;\n    } else {\n      toMutate.push(cell);\n    }\n  };\n\n  for (var i = range.offset; i < end; i++) {\n    _loop(i);\n  } // needs to append\n\n\n  var pool = dom.filter(function (n) {\n    return n.d;\n  });\n\n  var _loop2 = function _loop2() {\n    var cell = _toMutate[_i];\n    var node = pool.find(function (n) {\n      return n.d && n.cell.type === cell.type;\n    });\n    var index = cell.i;\n\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    } else {\n      dom.push({\n        d: false,\n        cell: cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index]\n      });\n    }\n  };\n\n  for (var _i = 0, _toMutate = toMutate; _i < _toMutate.length; _i++) {\n    _loop2();\n  }\n\n  dom.filter(function (n) {\n    return n.d && n.top !== -9999;\n  }).forEach(function (n) {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\n\nvar doRender = function doRender(el, nodeRender, dom, updateCellHeight) {\n  var children = Array.from(el.children).filter(function (n) {\n    return n.tagName !== 'TEMPLATE';\n  });\n  var childrenNu = children.length;\n  var child;\n\n  for (var i = 0; i < dom.length; i++) {\n    var node = dom[i];\n    var cell = node.cell; // the cell change, the content must be updated\n\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      } else {\n        var newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n\n      child['$ionCell'] = cell;\n    } else {\n      child = children[i];\n    } // only update position when it changes\n\n\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = \"translate3d(0,\".concat(node.top, \"px,0)\");\n    } // update visibility\n\n\n    var visible = cell.visible;\n\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      } else {\n        child.classList.add('virtual-loading');\n      }\n\n      node.visible = visible;\n    } // dynamic height\n\n\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\n\nvar createNode = function createNode(el, type) {\n  var template = getTemplate(el, type);\n\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n\n  return null;\n};\n\nvar getTemplate = function getTemplate(el, type) {\n  switch (type) {\n    case CELL_TYPE_ITEM:\n      return el.querySelector('template:not([name])');\n\n    case CELL_TYPE_HEADER:\n      return el.querySelector('template[name=header]');\n\n    case CELL_TYPE_FOOTER:\n      return el.querySelector('template[name=footer]');\n  }\n};\n\nvar getViewport = function getViewport(scrollTop, vierportHeight, margin) {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\n\nvar getRange = function getRange(heightIndex, viewport, buffer) {\n  var topPos = viewport.top;\n  var bottomPos = viewport.bottom; // find top index\n\n  var i = 0;\n\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n\n  var offset = Math.max(i - buffer - 1, 0); // find bottom index\n\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n\n  var end = Math.min(i + buffer, heightIndex.length);\n  var length = end - offset;\n  return {\n    offset: offset,\n    length: length\n  };\n};\n\nvar getShouldUpdate = function getShouldUpdate(dirtyIndex, currentRange, range) {\n  var end = range.offset + range.length;\n  return dirtyIndex <= end || currentRange.offset !== range.offset || currentRange.length !== range.length;\n};\n\nvar findCellIndex = function findCellIndex(cells, index) {\n  var max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n\n  if (index === 0) {\n    return 0;\n  } else if (index === max + 1) {\n    return cells.length;\n  } else {\n    return cells.findIndex(function (c) {\n      return c.index === index;\n    });\n  }\n};\n\nvar inplaceUpdate = function inplaceUpdate(dst, src, offset) {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n\n  for (var i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n\n  return dst;\n};\n\nvar _calcCells = function calcCells(items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) {\n  var cells = [];\n  var end = len + offset;\n\n  for (var i = offset; i < end; i++) {\n    var item = items[i];\n\n    if (headerFn) {\n      var value = headerFn(item, i, items);\n\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value: value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight\n        });\n      }\n    }\n\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight\n    });\n\n    if (footerFn) {\n      var _value = footerFn(item, i, items);\n\n      if (_value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value: _value,\n          index: i,\n          height: footerHeight ? footerHeight(_value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight\n        });\n      }\n    }\n  }\n\n  return cells;\n};\n\nvar _calcHeightIndex = function calcHeightIndex(buf, cells, index) {\n  var acum = buf[index];\n\n  for (var i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n\n  return acum;\n};\n\nvar resizeBuffer = function resizeBuffer(buf, len) {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n\n  if (buf.length === len) {\n    return buf;\n  } else if (len > buf.length) {\n    var newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  } else {\n    return buf.subarray(0, len);\n  }\n};\n\nvar positionForIndex = function positionForIndex(index, cells, heightIndex) {\n  var cell = cells.find(function (c) {\n    return c.type === CELL_TYPE_ITEM && c.index === index;\n  });\n\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n\n  return -1;\n};\n\nvar virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nvar VirtualScroll = /*#__PURE__*/function () {\n  function VirtualScroll(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, VirtualScroll);\n\n    registerInstance(this, hostRef);\n    this.range = {\n      offset: 0,\n      length: 0\n    };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxFooterHeight = 30;\n\n    this.onScroll = function () {\n      _this.updateVirtualScroll();\n    };\n  }\n\n  _createClass(VirtualScroll, [{\n    key: \"itemsChanged\",\n    value: function itemsChanged() {\n      this.calcCells();\n      this.updateVirtualScroll();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var contentEl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentEl = this.el.closest('ion-content');\n\n                if (contentEl) {\n                  _context.next = 4;\n                  break;\n                }\n\n                console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _context.next = 6;\n                return contentEl.getScrollElement();\n\n              case 6:\n                this.scrollEl = _context.sent;\n                this.contentEl = contentEl;\n                this.calcCells();\n                this.updateState();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateState();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.scrollEl = undefined;\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {\n      this.calcCells();\n      this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n\n  }, {\n    key: \"positionForItem\",\n    value: function positionForItem(index) {\n      return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n\n  }, {\n    key: \"checkRange\",\n    value: function () {\n      var _checkRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(offset) {\n        var len,\n            length,\n            cellIndex,\n            cells,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                len = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : -1;\n\n                if (this.items) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                length = len === -1 ? this.items.length - offset : len;\n                cellIndex = findCellIndex(this.cells, offset);\n                cells = _calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n                this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n                this.lastItemLen = this.items.length;\n                this.indexDirty = Math.max(offset - 1, 0);\n                this.scheduleUpdate();\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkRange(_x) {\n        return _checkRange.apply(this, arguments);\n      }\n\n      return checkRange;\n    }()\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n\n  }, {\n    key: \"checkEnd\",\n    value: function () {\n      var _checkEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.items) {\n                  this.checkRange(this.lastItemLen);\n                }\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function checkEnd() {\n        return _checkEnd.apply(this, arguments);\n      }\n\n      return checkEnd;\n    }()\n  }, {\n    key: \"updateVirtualScroll\",\n    value: function updateVirtualScroll() {\n      // do nothing if virtual-scroll is disabled\n      if (!this.isEnabled || !this.scrollEl) {\n        return;\n      } // unschedule future updates\n\n\n      if (this.timerUpdate) {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = undefined;\n      } // schedule DOM operations into the stencil queue\n\n\n      readTask(this.readVS.bind(this));\n      writeTask(this.writeVS.bind(this));\n    }\n  }, {\n    key: \"readVS\",\n    value: function readVS() {\n      var contentEl = this.contentEl,\n          scrollEl = this.scrollEl,\n          el = this.el;\n      var topOffset = 0;\n      var node = el;\n\n      while (node && node !== contentEl) {\n        topOffset += node.offsetTop;\n        node = node.offsetParent;\n      }\n\n      this.viewportOffset = topOffset;\n\n      if (scrollEl) {\n        this.viewportHeight = scrollEl.offsetHeight;\n        this.currentScrollTop = scrollEl.scrollTop;\n      }\n    }\n  }, {\n    key: \"writeVS\",\n    value: function writeVS() {\n      var dirtyIndex = this.indexDirty; // get visible viewport\n\n      var scrollTop = this.currentScrollTop - this.viewportOffset;\n      var viewport = getViewport(scrollTop, this.viewportHeight, 100); // compute lazily the height index\n\n      var heightIndex = this.getHeightIndex(); // get array bounds of visible cells base in the viewport\n\n      var range = getRange(heightIndex, viewport, 2); // fast path, do nothing\n\n      var shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n\n      if (!shouldUpdate) {\n        return;\n      }\n\n      this.range = range; // in place mutation of the virtual DOM\n\n      updateVDom(this.virtualDom, heightIndex, this.cells, range); // Write DOM\n      // Different code paths taken depending of the render API used\n\n      if (this.nodeRender) {\n        doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n      } else if (this.domRender) {\n        this.domRender(this.virtualDom);\n      } else if (this.renderItem) {\n        forceUpdate(this);\n      }\n    }\n  }, {\n    key: \"updateCellHeight\",\n    value: function updateCellHeight(cell, node) {\n      var _this2 = this;\n\n      var update = function update() {\n        if (node['$ionCell'] === cell) {\n          var style = window.getComputedStyle(node);\n          var height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n\n          _this2.setCellHeight(cell, height);\n        }\n      };\n\n      if (node && node.componentOnReady) {\n        node.componentOnReady().then(update);\n      } else {\n        update();\n      }\n    }\n  }, {\n    key: \"setCellHeight\",\n    value: function setCellHeight(cell, height) {\n      var index = cell.i; // the cell might changed since the height update was scheduled\n\n      if (cell !== this.cells[index]) {\n        return;\n      }\n\n      if (cell.height !== height || cell.visible !== true) {\n        cell.visible = true;\n        cell.height = height;\n        this.indexDirty = Math.min(this.indexDirty, index);\n        this.scheduleUpdate();\n      }\n    }\n  }, {\n    key: \"scheduleUpdate\",\n    value: function scheduleUpdate() {\n      var _this3 = this;\n\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = setTimeout(function () {\n        return _this3.updateVirtualScroll();\n      }, 100);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState() {\n      var shouldEnable = !!(this.scrollEl && this.cells);\n\n      if (shouldEnable !== this.isEnabled) {\n        this.enableScrollEvents(shouldEnable);\n\n        if (shouldEnable) {\n          this.updateVirtualScroll();\n        }\n      }\n    }\n  }, {\n    key: \"calcCells\",\n    value: function calcCells() {\n      if (!this.items) {\n        return;\n      }\n\n      this.lastItemLen = this.items.length;\n      this.cells = _calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n      this.indexDirty = 0;\n    }\n  }, {\n    key: \"getHeightIndex\",\n    value: function getHeightIndex() {\n      if (this.indexDirty !== Infinity) {\n        this.calcHeightIndex(this.indexDirty);\n      }\n\n      return this.heightIndex;\n    }\n  }, {\n    key: \"calcHeightIndex\",\n    value: function calcHeightIndex() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      // TODO: optimize, we don't need to calculate all the cells\n      this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n      this.totalHeight = _calcHeightIndex(this.heightIndex, this.cells, index);\n      this.indexDirty = Infinity;\n    }\n  }, {\n    key: \"enableScrollEvents\",\n    value: function enableScrollEvents(shouldListen) {\n      var _this4 = this;\n\n      if (this.rmEvent) {\n        this.rmEvent();\n        this.rmEvent = undefined;\n      }\n\n      var scrollEl = this.scrollEl;\n\n      if (scrollEl) {\n        this.isEnabled = shouldListen;\n        scrollEl.addEventListener('scroll', this.onScroll);\n\n        this.rmEvent = function () {\n          scrollEl.removeEventListener('scroll', _this4.onScroll);\n        };\n      }\n    }\n  }, {\n    key: \"renderVirtualNode\",\n    value: function renderVirtualNode(node) {\n      var _node$cell = node.cell,\n          type = _node$cell.type,\n          value = _node$cell.value,\n          index = _node$cell.index;\n\n      switch (type) {\n        case CELL_TYPE_ITEM:\n          return this.renderItem(value, index);\n\n        case CELL_TYPE_HEADER:\n          return this.renderHeader(value, index);\n\n        case CELL_TYPE_FOOTER:\n          return this.renderFooter(value, index);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return h(Host, {\n        style: {\n          height: \"\".concat(this.totalHeight, \"px\")\n        }\n      }, this.renderItem && h(VirtualProxy, {\n        dom: this.virtualDom\n      }, this.virtualDom.map(function (node) {\n        return _this5.renderVirtualNode(node);\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n      };\n    }\n  }]);\n\n  return VirtualScroll;\n}();\n\nvar VirtualProxy = function VirtualProxy(_ref, children, utils) {\n  var dom = _ref.dom;\n  return utils.map(children, function (child, i) {\n    var node = dom[i];\n    var vattrs = child.vattrs || {};\n    var classes = vattrs.class || '';\n    classes += 'virtual-item ';\n\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n\n    return Object.assign(Object.assign({}, child), {\n      vattrs: Object.assign(Object.assign({}, vattrs), {\n        class: classes,\n        style: Object.assign(Object.assign({}, vattrs.style), {\n          transform: \"translate3d(0,\".concat(node.top, \"px,0)\")\n        })\n      })\n    });\n  });\n};\n\nVirtualScroll.style = virtualScrollCss;\nexport { VirtualScroll as ion_virtual_scroll };","map":{"version":3,"sources":["C:/dP-It/app/ionic/apps/dP Tennismanager/node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":["r","registerInstance","f","readTask","c","writeTask","j","forceUpdate","h","H","Host","i","getElement","CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","NODE_CHANGE_NONE","NODE_CHANGE_POSITION","NODE_CHANGE_CELL","MIN_READS","updateVDom","dom","heightIndex","cells","range","node","change","d","toMutate","end","offset","length","cell","find","n","top","push","pool","filter","type","index","visible","forEach","doRender","el","nodeRender","updateCellHeight","children","Array","from","tagName","childrenNu","child","newChild","createNode","classList","add","appendChild","style","transform","remove","reads","template","getTemplate","ownerDocument","importNode","content","querySelector","getViewport","scrollTop","vierportHeight","margin","Math","max","bottom","getRange","viewport","buffer","topPos","bottomPos","min","getShouldUpdate","dirtyIndex","currentRange","findCellIndex","findIndex","inplaceUpdate","dst","src","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","len","item","value","height","calcHeightIndex","buf","acum","resizeBuffer","Uint32Array","newBuf","set","subarray","positionForIndex","virtualScrollCss","VirtualScroll","hostRef","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","contentEl","closest","console","error","getScrollElement","scrollEl","updateState","undefined","Promise","resolve","getHeightIndex","cellIndex","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","offsetTop","offsetParent","offsetHeight","shouldUpdate","domRender","renderItem","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","shouldListen","rmEvent","addEventListener","removeEventListener","renderHeader","renderFooter","VirtualProxy","map","renderVirtualNode","utils","vattrs","classes","class","Object","assign","ion_virtual_scroll"],"mappings":"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","sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-44bf8136.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n    // reset dom\n    for (const node of dom) {\n        node.change = NODE_CHANGE_NONE;\n        node.d = true;\n    }\n    // try to match into exisiting dom\n    const toMutate = [];\n    const end = range.offset + range.length;\n    for (let i = range.offset; i < end; i++) {\n        const cell = cells[i];\n        const node = dom.find(n => n.d && n.cell === cell);\n        if (node) {\n            const top = heightIndex[i];\n            if (top !== node.top) {\n                node.top = top;\n                node.change = NODE_CHANGE_POSITION;\n            }\n            node.d = false;\n        }\n        else {\n            toMutate.push(cell);\n        }\n    }\n    // needs to append\n    const pool = dom.filter(n => n.d);\n    for (const cell of toMutate) {\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\n        const index = cell.i;\n        if (node) {\n            node.d = false;\n            node.change = NODE_CHANGE_CELL;\n            node.cell = cell;\n            node.top = heightIndex[index];\n        }\n        else {\n            dom.push({\n                d: false,\n                cell,\n                visible: true,\n                change: NODE_CHANGE_CELL,\n                top: heightIndex[index],\n            });\n        }\n    }\n    dom\n        .filter(n => n.d && n.top !== -9999)\n        .forEach(n => {\n        n.change = NODE_CHANGE_POSITION;\n        n.top = -9999;\n    });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n    const childrenNu = children.length;\n    let child;\n    for (let i = 0; i < dom.length; i++) {\n        const node = dom[i];\n        const cell = node.cell;\n        // the cell change, the content must be updated\n        if (node.change === NODE_CHANGE_CELL) {\n            if (i < childrenNu) {\n                child = children[i];\n                nodeRender(child, cell, i);\n            }\n            else {\n                const newChild = createNode(el, cell.type);\n                child = nodeRender(newChild, cell, i) || newChild;\n                child.classList.add('virtual-item');\n                el.appendChild(child);\n            }\n            child['$ionCell'] = cell;\n        }\n        else {\n            child = children[i];\n        }\n        // only update position when it changes\n        if (node.change !== NODE_CHANGE_NONE) {\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\n        }\n        // update visibility\n        const visible = cell.visible;\n        if (node.visible !== visible) {\n            if (visible) {\n                child.classList.remove('virtual-loading');\n            }\n            else {\n                child.classList.add('virtual-loading');\n            }\n            node.visible = visible;\n        }\n        // dynamic height\n        if (cell.reads > 0) {\n            updateCellHeight(cell, child);\n            cell.reads--;\n        }\n    }\n};\nconst createNode = (el, type) => {\n    const template = getTemplate(el, type);\n    if (template && el.ownerDocument) {\n        return el.ownerDocument.importNode(template.content, true).children[0];\n    }\n    return null;\n};\nconst getTemplate = (el, type) => {\n    switch (type) {\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n    }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n    return {\n        top: Math.max(scrollTop - margin, 0),\n        bottom: scrollTop + vierportHeight + margin\n    };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n    const topPos = viewport.top;\n    const bottomPos = viewport.bottom;\n    // find top index\n    let i = 0;\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] > topPos) {\n            break;\n        }\n    }\n    const offset = Math.max(i - buffer - 1, 0);\n    // find bottom index\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] >= bottomPos) {\n            break;\n        }\n    }\n    const end = Math.min(i + buffer, heightIndex.length);\n    const length = end - offset;\n    return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n    const end = range.offset + range.length;\n    return (dirtyIndex <= end ||\n        currentRange.offset !== range.offset ||\n        currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n    if (index === 0) {\n        return 0;\n    }\n    else if (index === max + 1) {\n        return cells.length;\n    }\n    else {\n        return cells.findIndex(c => c.index === index);\n    }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n    if (offset === 0 && src.length >= dst.length) {\n        return src;\n    }\n    for (let i = 0; i < src.length; i++) {\n        dst[i + offset] = src[i];\n    }\n    return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n    const cells = [];\n    const end = len + offset;\n    for (let i = offset; i < end; i++) {\n        const item = items[i];\n        if (headerFn) {\n            const value = headerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_HEADER,\n                    value,\n                    index: i,\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n                    reads: headerHeight ? 0 : MIN_READS,\n                    visible: !!headerHeight,\n                });\n            }\n        }\n        cells.push({\n            i: j++,\n            type: CELL_TYPE_ITEM,\n            value: item,\n            index: i,\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n            reads: itemHeight ? 0 : MIN_READS,\n            visible: !!itemHeight,\n        });\n        if (footerFn) {\n            const value = footerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_FOOTER,\n                    value,\n                    index: i,\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n                    reads: footerHeight ? 0 : MIN_READS,\n                    visible: !!footerHeight,\n                });\n            }\n        }\n    }\n    return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n    let acum = buf[index];\n    for (let i = index; i < buf.length; i++) {\n        buf[i] = acum;\n        acum += cells[i].height;\n    }\n    return acum;\n};\nconst resizeBuffer = (buf, len) => {\n    if (!buf) {\n        return new Uint32Array(len);\n    }\n    if (buf.length === len) {\n        return buf;\n    }\n    else if (len > buf.length) {\n        const newBuf = new Uint32Array(len);\n        newBuf.set(buf);\n        return newBuf;\n    }\n    else {\n        return buf.subarray(0, len);\n    }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n    if (cell) {\n        return heightIndex[cell.i];\n    }\n    return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.offsetParent;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            forceUpdate(this);\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"]},"metadata":{},"sourceType":"module"}