{"ast":null,"code":"import _defineProperty from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { r as registerInstance, e as createEvent, f as readTask, h, H as Host, i as getElement } from './index-44bf8136.js';\nimport { b as getIonMode } from './ionic-global-837be8f3.js';\nimport { d as debounceEvent, r as raf, f as findItemLabel } from './helpers-5c745fbd.js';\nimport { c as createColorClasses } from './theme-3f0b0c04.js';\nvar textareaIosCss = \".sc-ion-textarea-ios-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--border-radius:0;display:block;position:relative;-ms-flex:1;flex:1;width:100%;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);white-space:pre-wrap;z-index:2;-webkit-box-sizing:border-box;box-sizing:border-box}.ion-color.sc-ion-textarea-ios-h{background:initial}.ion-color.sc-ion-textarea-ios-h{color:var(--ion-color-base)}ion-item.sc-ion-textarea-ios-h,ion-item .sc-ion-textarea-ios-h{-ms-flex-item-align:baseline;align-self:baseline}ion-item.sc-ion-textarea-ios-h:not(.item-label),ion-item:not(.item-label) .sc-ion-textarea-ios-h{--padding-start:0}.textarea-wrapper.sc-ion-textarea-ios{min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit}.native-textarea.sc-ion-textarea-ios{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;resize:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-textarea.sc-ion-textarea-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-ios::-webkit-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-moz-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios:-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-ios{opacity:0.4}.cloned-input.sc-ion-textarea-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-ios .cloned-input.sc-ion-textarea-ios,[dir=rtl].sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios,[dir=rtl] .sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios{left:unset;right:unset;right:0}.sc-ion-textarea-ios-h{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-stacked.sc-ion-textarea-ios-h,.item-label-stacked .sc-ion-textarea-ios-h,.item-label-floating.sc-ion-textarea-ios-h,.item-label-floating .sc-ion-textarea-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}\";\nvar textareaMdCss = \".sc-ion-textarea-md-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--border-radius:0;display:block;position:relative;-ms-flex:1;flex:1;width:100%;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);white-space:pre-wrap;z-index:2;-webkit-box-sizing:border-box;box-sizing:border-box}.ion-color.sc-ion-textarea-md-h{background:initial}.ion-color.sc-ion-textarea-md-h{color:var(--ion-color-base)}ion-item.sc-ion-textarea-md-h,ion-item .sc-ion-textarea-md-h{-ms-flex-item-align:baseline;align-self:baseline}ion-item.sc-ion-textarea-md-h:not(.item-label),ion-item:not(.item-label) .sc-ion-textarea-md-h{--padding-start:0}.textarea-wrapper.sc-ion-textarea-md{min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit}.native-textarea.sc-ion-textarea-md{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;resize:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-textarea.sc-ion-textarea-md{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-md::-webkit-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md::-moz-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md:-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md::-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md::placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-md{opacity:0.4}.cloned-input.sc-ion-textarea-md{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-md .cloned-input.sc-ion-textarea-md,[dir=rtl].sc-ion-textarea-md-h .cloned-input.sc-ion-textarea-md,[dir=rtl] .sc-ion-textarea-md-h .cloned-input.sc-ion-textarea-md{left:unset;right:unset;right:0}.sc-ion-textarea-md-h{--padding-top:10px;--padding-end:0;--padding-bottom:11px;--padding-start:8px;margin-left:0;margin-right:0;margin-top:8px;margin-bottom:0;font-size:inherit}.item-label-stacked.sc-ion-textarea-md-h,.item-label-stacked .sc-ion-textarea-md-h,.item-label-floating.sc-ion-textarea-md-h,.item-label-floating .sc-ion-textarea-md-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0}\";\n\nvar Textarea = /*#__PURE__*/function () {\n  function Textarea(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Textarea);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionInput = createEvent(this, \"ionInput\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.inputId = \"ion-input-\".concat(textareaIds++);\n    this.didBlurAfterEdit = false;\n    this.hasFocus = false;\n    /**\n     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n     */\n\n    this.autocapitalize = 'none';\n    /**\n     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n     */\n\n    this.autofocus = false;\n    /**\n     * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n     */\n\n    this.clearOnEdit = false;\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n     */\n\n    this.debounce = 0;\n    /**\n     * If `true`, the user cannot interact with the textarea.\n     */\n\n    this.disabled = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n\n    this.readonly = false;\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n\n    this.required = false;\n    /**\n     * If `true`, the element will have its spelling and grammar checked.\n     */\n\n    this.spellcheck = false;\n    /**\n     * If `true`, the element height will increase based on the value.\n     */\n\n    this.autoGrow = false;\n    /**\n     * The value of the textarea.\n     */\n\n    this.value = '';\n\n    this.onInput = function (ev) {\n      if (_this.nativeInput) {\n        _this.value = _this.nativeInput.value;\n      }\n\n      _this.emitStyle();\n\n      _this.ionInput.emit(ev);\n    };\n\n    this.onFocus = function (ev) {\n      _this.hasFocus = true;\n\n      _this.focusChange();\n\n      _this.ionFocus.emit(ev);\n    };\n\n    this.onBlur = function (ev) {\n      _this.hasFocus = false;\n\n      _this.focusChange();\n\n      _this.ionBlur.emit(ev);\n    };\n\n    this.onKeyDown = function () {\n      _this.checkClearOnEdit();\n    };\n  }\n\n  _createClass(Textarea, [{\n    key: \"debounceChanged\",\n    value: function debounceChanged() {\n      this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n\n  }, {\n    key: \"valueChanged\",\n    value: function valueChanged() {\n      var nativeInput = this.nativeInput;\n      var value = this.getValue();\n\n      if (nativeInput && nativeInput.value !== value) {\n        nativeInput.value = value;\n      }\n\n      this.runAutoGrow();\n      this.emitStyle();\n      this.ionChange.emit({\n        value: value\n      });\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.emitStyle();\n      this.debounceChanged();\n      {\n        document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n          detail: this.el\n        }));\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      {\n        document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n          detail: this.el\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n\n      raf(function () {\n        return _this2.runAutoGrow();\n      });\n    }\n  }, {\n    key: \"runAutoGrow\",\n    value: function runAutoGrow() {\n      var _this3 = this;\n\n      var nativeInput = this.nativeInput;\n\n      if (nativeInput && this.autoGrow) {\n        readTask(function () {\n          nativeInput.style.height = 'auto';\n          nativeInput.style.height = nativeInput.scrollHeight + 'px';\n\n          if (_this3.textareaWrapper) {\n            _this3.textareaWrapper.style.height = nativeInput.scrollHeight + 'px';\n          }\n        });\n      }\n    }\n    /**\n     * Sets focus on the specified `ion-textarea`. Use this method instead of the global\n     * `input.focus()`.\n     */\n\n  }, {\n    key: \"setFocus\",\n    value: function () {\n      var _setFocus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.nativeInput) {\n                  this.nativeInput.focus();\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setFocus() {\n        return _setFocus.apply(this, arguments);\n      }\n\n      return setFocus;\n    }()\n    /**\n     * Returns the native `<textarea>` element used under the hood.\n     */\n\n  }, {\n    key: \"getInputElement\",\n    value: function getInputElement() {\n      return Promise.resolve(this.nativeInput);\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        'interactive': true,\n        'textarea': true,\n        'input': true,\n        'interactive-disabled': this.disabled,\n        'has-placeholder': this.placeholder != null,\n        'has-value': this.hasValue(),\n        'has-focus': this.hasFocus\n      });\n    }\n    /**\n     * Check if we need to clear the text input if clearOnEdit is enabled\n     */\n\n  }, {\n    key: \"checkClearOnEdit\",\n    value: function checkClearOnEdit() {\n      if (!this.clearOnEdit) {\n        return;\n      } // Did the input value change after it was blurred and edited?\n\n\n      if (this.didBlurAfterEdit && this.hasValue()) {\n        // Clear the input\n        this.value = '';\n      } // Reset the flag\n\n\n      this.didBlurAfterEdit = false;\n    }\n  }, {\n    key: \"focusChange\",\n    value: function focusChange() {\n      // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n      if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n        this.didBlurAfterEdit = true;\n      }\n\n      this.emitStyle();\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return this.getValue() !== '';\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value || '';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var mode = getIonMode(this);\n      var value = this.getValue();\n      var labelId = this.inputId + '-lbl';\n      var label = findItemLabel(this.el);\n\n      if (label) {\n        label.id = labelId;\n      }\n\n      return h(Host, {\n        \"aria-disabled\": this.disabled ? 'true' : null,\n        class: Object.assign(Object.assign({}, createColorClasses(this.color)), _defineProperty({}, mode, true))\n      }, h(\"div\", {\n        class: \"textarea-wrapper\",\n        ref: function ref(el) {\n          return _this4.textareaWrapper = el;\n        }\n      }, h(\"textarea\", {\n        class: \"native-textarea\",\n        \"aria-labelledby\": labelId,\n        ref: function ref(el) {\n          return _this4.nativeInput = el;\n        },\n        autoCapitalize: this.autocapitalize,\n        autoFocus: this.autofocus,\n        enterKeyHint: this.enterkeyhint,\n        inputMode: this.inputmode,\n        disabled: this.disabled,\n        maxLength: this.maxlength,\n        minLength: this.minlength,\n        name: this.name,\n        placeholder: this.placeholder || '',\n        readOnly: this.readonly,\n        required: this.required,\n        spellcheck: this.spellcheck,\n        cols: this.cols,\n        rows: this.rows,\n        wrap: this.wrap,\n        onInput: this.onInput,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        onKeyDown: this.onKeyDown\n      }, value)));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n\n  return Textarea;\n}();\n\nvar textareaIds = 0;\nTextarea.style = {\n  ios: textareaIosCss,\n  md: textareaMdCss\n};\nexport { Textarea as ion_textarea };","map":null,"metadata":{},"sourceType":"module"}