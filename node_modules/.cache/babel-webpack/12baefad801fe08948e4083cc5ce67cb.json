{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-44bf8136.js';\nimport { b as getIonMode, c as config } from './ionic-global-837be8f3.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as _transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-37b50f53.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\n\nvar ViewController = /*#__PURE__*/function () {\n  function ViewController(component, params) {\n    _classCallCheck(this, ViewController);\n\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  _createClass(ViewController, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(container) {\n        var component;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.state = VIEW_STATE_ATTACHED;\n\n                if (this.element) {\n                  _context.next = 6;\n                  break;\n                }\n\n                component = this.component;\n                _context.next = 5;\n                return attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n\n              case 5:\n                this.element = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n      var element = this.element;\n\n      if (element) {\n        if (this.delegate) {\n          this.delegate.removeViewFromDom(element.parentElement, element);\n        } else {\n          element.remove();\n        }\n      }\n\n      this.nav = undefined;\n      this.state = VIEW_STATE_DESTROYED;\n    }\n  }]);\n\n  return ViewController;\n}();\n\nvar matches = function matches(view, id, params) {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  var currentParams = view.params;\n\n  if (currentParams === params) {\n    return true;\n  }\n\n  if (!currentParams && !params) {\n    return true;\n  }\n\n  if (!currentParams || !params) {\n    return false;\n  }\n\n  var keysA = Object.keys(currentParams);\n  var keysB = Object.keys(params);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var _i = 0, _keysA = keysA; _i < _keysA.length; _i++) {\n    var key = _keysA[_i];\n\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar convertToView = function convertToView(page, params) {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nvar convertToViews = function convertToViews(pages) {\n  return pages.map(function (page) {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(function (v) {\n    return v !== null;\n  });\n};\n\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nvar Nav = /*#__PURE__*/function () {\n  function Nav(hostRef) {\n    _classCallCheck(this, Nav);\n\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    this.animated = true;\n  }\n\n  _createClass(Nav, [{\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(this.swipeGesture === true);\n      }\n    }\n  }, {\n    key: \"rootChanged\",\n    value: function rootChanged() {\n      if (this.root !== undefined) {\n        if (!this.useRouter) {\n          this.setRoot(this.root, this.rootParams);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n\n      if (this.swipeGesture === undefined) {\n        var mode = getIonMode(this);\n        this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n      }\n\n      this.ionNavWillLoad.emit();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.rootChanged();\n                _context2.next = 3;\n                return import('./swipe-back-0a6a44c8.js');\n\n              case 3:\n                this.gesture = _context2.sent.createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n                this.swipeGestureChanged();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"componentDidUnload\",\n    value: function componentDidUnload() {\n      var _iterator = _createForOfIteratorHelper(this.views),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n          view._destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      } // release swipe back gesture and transition\n\n\n      this.transInstr.length = this.views.length = 0;\n      this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(component, componentProps, opts, done) {\n      return this.queueTrns({\n        insertStart: -1,\n        insertViews: [{\n          component: component,\n          componentProps: componentProps\n        }],\n        opts: opts\n      }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(insertIndex, component, componentProps, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: [{\n          component: component,\n          componentProps: componentProps\n        }],\n        opts: opts\n      }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insertPages\",\n    value: function insertPages(insertIndex, insertComponents, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: insertComponents,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop(opts, done) {\n      return this.queueTrns({\n        removeStart: -1,\n        removeCount: 1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popTo\",\n    value: function popTo(indexOrViewCtrl, opts, done) {\n      var tiConfig = {\n        removeStart: -1,\n        removeCount: -1,\n        opts: opts\n      };\n\n      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n        tiConfig.removeView = indexOrViewCtrl;\n        tiConfig.removeStart = 1;\n      } else if (typeof indexOrViewCtrl === 'number') {\n        tiConfig.removeStart = indexOrViewCtrl + 1;\n      }\n\n      return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(opts, done) {\n      return this.queueTrns({\n        removeStart: 1,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"removeIndex\",\n    value: function removeIndex(startIndex) {\n      var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var opts = arguments.length > 2 ? arguments[2] : undefined;\n      var done = arguments.length > 3 ? arguments[3] : undefined;\n      return this.queueTrns({\n        removeStart: startIndex,\n        removeCount: removeCount,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setRoot\",\n    value: function setRoot(component, componentProps, opts, done) {\n      return this.setPages([{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setPages\",\n    value: function setPages(views, opts, done) {\n      if (opts == null) {\n        opts = {};\n      } // if animation wasn't set to true then default it to NOT animate\n\n\n      if (opts.animated !== true) {\n        opts.animated = false;\n      }\n\n      return this.queueTrns({\n        insertStart: 0,\n        insertViews: views,\n        removeStart: 0,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /** @internal */\n\n  }, {\n    key: \"setRouteId\",\n    value: function setRouteId(id, params, direction, animation) {\n      var active = this.getActiveSync();\n\n      if (matches(active, id, params)) {\n        return Promise.resolve({\n          changed: false,\n          element: active.element\n        });\n      }\n\n      var resolve;\n      var promise = new Promise(function (r) {\n        return resolve = r;\n      });\n      var finish;\n      var commonOpts = {\n        updateURL: false,\n        viewIsReady: function viewIsReady(enteringEl) {\n          var mark;\n          var p = new Promise(function (r) {\n            return mark = r;\n          });\n          resolve({\n            changed: true,\n            element: enteringEl,\n            markVisible: function () {\n              var _markVisible = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        mark();\n                        _context3.next = 3;\n                        return finish;\n\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              function markVisible() {\n                return _markVisible.apply(this, arguments);\n              }\n\n              return markVisible;\n            }()\n          });\n          return p;\n        }\n      };\n\n      if (direction === 'root') {\n        finish = this.setRoot(id, params, commonOpts);\n      } else {\n        var viewController = this.views.find(function (v) {\n          return matches(v, id, params);\n        });\n\n        if (viewController) {\n          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animationBuilder: animation\n          }));\n        } else if (direction === 'forward') {\n          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n            animationBuilder: animation\n          }));\n        } else if (direction === 'back') {\n          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animated: true,\n            animationBuilder: animation\n          }));\n        }\n      }\n\n      return promise;\n    }\n    /** @internal */\n\n  }, {\n    key: \"getRouteId\",\n    value: function () {\n      var _getRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var active;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                active = this.getActiveSync();\n                return _context4.abrupt(\"return\", active ? {\n                  id: active.element.tagName,\n                  params: active.params,\n                  element: active.element\n                } : undefined);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRouteId() {\n        return _getRouteId.apply(this, arguments);\n      }\n\n      return getRouteId;\n    }()\n    /**\n     * Get the active view.\n     */\n\n  }, {\n    key: \"getActive\",\n    value: function getActive() {\n      return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n\n  }, {\n    key: \"getByIndex\",\n    value: function getByIndex(index) {\n      return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n\n  }, {\n    key: \"canGoBack\",\n    value: function canGoBack(view) {\n      return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious(view) {\n      return Promise.resolve(this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.views.length;\n    }\n  }, {\n    key: \"getActiveSync\",\n    value: function getActiveSync() {\n      return this.views[this.views.length - 1];\n    }\n  }, {\n    key: \"canGoBackSync\",\n    value: function canGoBackSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n      return !!(view && this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getPreviousSync\",\n    value: function getPreviousSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n\n      if (!view) {\n        return undefined;\n      }\n\n      var views = this.views;\n      var index = views.indexOf(view);\n      return index > 0 ? views[index - 1] : undefined;\n    } // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n\n  }, {\n    key: \"queueTrns\",\n    value: function () {\n      var _queueTrns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ti, done) {\n        var promise, router, canTransition;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 2:\n                promise = new Promise(function (resolve, reject) {\n                  ti.resolve = resolve;\n                  ti.reject = reject;\n                });\n                ti.done = done;\n                /**\n                 * If using router, check to see if navigation hooks\n                 * will allow us to perform this transition. This\n                 * is required in order for hooks to work with\n                 * the ion-back-button or swipe to go back.\n                 */\n\n                if (!(ti.opts && ti.opts.updateURL !== false && this.useRouter)) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                router = document.querySelector('ion-router');\n\n                if (!router) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                _context5.next = 9;\n                return router.canTransition();\n\n              case 9:\n                canTransition = _context5.sent;\n\n                if (!(canTransition === false)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 14:\n                if (!(typeof canTransition === 'string')) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                router.push(canTransition, ti.opts.direction || 'back');\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 17:\n                // Normalize empty\n                if (ti.insertViews && ti.insertViews.length === 0) {\n                  ti.insertViews = undefined;\n                } // Enqueue transition instruction\n\n\n                this.transInstr.push(ti); // if there isn't a transition already happening\n                // then this will kick off this transition\n\n                this.nextTrns();\n                return _context5.abrupt(\"return\", promise);\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function queueTrns(_x2, _x3) {\n        return _queueTrns.apply(this, arguments);\n      }\n\n      return queueTrns;\n    }()\n  }, {\n    key: \"success\",\n    value: function success(result, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      if (ti.done) {\n        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n      }\n\n      ti.resolve(result.hasCompleted);\n\n      if (ti.opts.updateURL !== false && this.useRouter) {\n        var router = document.querySelector('ion-router');\n\n        if (router) {\n          var direction = result.direction === 'back' ? 'back' : 'forward';\n          router.navChanged(direction);\n        }\n      }\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(rejectReason, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      this.transInstr.length = 0;\n      this.fireError(rejectReason, ti);\n    }\n  }, {\n    key: \"fireError\",\n    value: function fireError(rejectReason, ti) {\n      if (ti.done) {\n        ti.done(false, false, rejectReason);\n      }\n\n      if (ti.reject && !this.destroyed) {\n        ti.reject(rejectReason);\n      } else {\n        ti.resolve(false);\n      }\n    }\n  }, {\n    key: \"nextTrns\",\n    value: function nextTrns() {\n      // this is the framework's bread 'n butta function\n      // only one transition is allowed at any given time\n      if (this.isTransitioning) {\n        return false;\n      } // there is no transition happening right now\n      // get the next instruction\n\n\n      var ti = this.transInstr.shift();\n\n      if (!ti) {\n        return false;\n      }\n\n      this.runTransition(ti);\n      return true;\n    }\n  }, {\n    key: \"runTransition\",\n    value: function () {\n      var _runTransition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ti) {\n        var leavingView, enteringView, requiresTransition, isBackDirection, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                // set that this nav is actively transitioning\n                this.ionNavWillChange.emit();\n                this.isTransitioning = true;\n                this.prepareTI(ti);\n                leavingView = this.getActiveSync();\n                enteringView = this.getEnteringView(ti, leavingView);\n\n                if (!(!leavingView && !enteringView)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error('no views in the stack to be removed');\n\n              case 8:\n                if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.next = 11;\n                return enteringView.init(this.el);\n\n              case 11:\n                this.postViewInit(enteringView, leavingView, ti); // Needs transition?\n\n                requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n\n                if (requiresTransition && ti.opts && leavingView) {\n                  isBackDirection = ti.opts.direction === 'back';\n                  /**\n                   * If heading back, use the entering page's animation\n                   * unless otherwise specified by the developer.\n                   */\n\n                  if (isBackDirection) {\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || enteringView && enteringView.animationBuilder;\n                  }\n\n                  leavingView.animationBuilder = ti.opts.animationBuilder;\n                }\n\n                if (!requiresTransition) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                _context6.next = 17;\n                return this.transition(enteringView, leavingView, ti);\n\n              case 17:\n                _context6.t0 = _context6.sent;\n                _context6.next = 21;\n                break;\n\n              case 20:\n                _context6.t0 = {\n                  // transition is not required, so we are already done!\n                  // they're inserting/removing the views somewhere in the middle or\n                  // beginning, so visually nothing needs to animate/transition\n                  // resolve immediately because there's no animation that's happening\n                  hasCompleted: true,\n                  requiresTransition: false\n                };\n\n              case 21:\n                result = _context6.t0;\n                this.success(result, ti);\n                this.ionNavDidChange.emit();\n                _context6.next = 29;\n                break;\n\n              case 26:\n                _context6.prev = 26;\n                _context6.t1 = _context6[\"catch\"](0);\n                this.failed(_context6.t1, ti);\n\n              case 29:\n                this.isTransitioning = false;\n                this.nextTrns();\n\n              case 31:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 26]]);\n      }));\n\n      function runTransition(_x4) {\n        return _runTransition.apply(this, arguments);\n      }\n\n      return runTransition;\n    }()\n  }, {\n    key: \"prepareTI\",\n    value: function prepareTI(ti) {\n      var viewsLength = this.views.length;\n      ti.opts = ti.opts || {};\n\n      if (ti.opts.delegate === undefined) {\n        ti.opts.delegate = this.delegate;\n      }\n\n      if (ti.removeView !== undefined) {\n        assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n        assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n        var index = this.views.indexOf(ti.removeView);\n\n        if (index < 0) {\n          throw new Error('removeView was not found');\n        }\n\n        ti.removeStart += index;\n      }\n\n      if (ti.removeStart !== undefined) {\n        if (ti.removeStart < 0) {\n          ti.removeStart = viewsLength - 1;\n        }\n\n        if (ti.removeCount < 0) {\n          ti.removeCount = viewsLength - ti.removeStart;\n        }\n\n        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n      }\n\n      if (ti.insertViews) {\n        // allow -1 to be passed in to auto push it on the end\n        // and clean up the index if it's larger then the size of the stack\n        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n          ti.insertStart = viewsLength;\n        }\n\n        ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n      }\n\n      var insertViews = ti.insertViews;\n\n      if (!insertViews) {\n        return;\n      }\n\n      assert(insertViews.length > 0, 'length can not be zero');\n      var viewControllers = convertToViews(insertViews);\n\n      if (viewControllers.length === 0) {\n        throw new Error('invalid views to insert');\n      } // Check all the inserted view are correct\n\n\n      var _iterator2 = _createForOfIteratorHelper(viewControllers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.delegate = ti.opts.delegate;\n          var nav = view.nav;\n\n          if (nav && nav !== this) {\n            throw new Error('inserted view was already inserted');\n          }\n\n          if (view.state === VIEW_STATE_DESTROYED) {\n            throw new Error('inserted view was already destroyed');\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      ti.insertViews = viewControllers;\n    }\n  }, {\n    key: \"getEnteringView\",\n    value: function getEnteringView(ti, leavingView) {\n      var insertViews = ti.insertViews;\n\n      if (insertViews !== undefined) {\n        // grab the very last view of the views to be inserted\n        // and initialize it as the new entering view\n        return insertViews[insertViews.length - 1];\n      }\n\n      var removeStart = ti.removeStart;\n\n      if (removeStart !== undefined) {\n        var views = this.views;\n        var removeEnd = removeStart + ti.removeCount;\n\n        for (var i = views.length - 1; i >= 0; i--) {\n          var view = views[i];\n\n          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n            return view;\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"postViewInit\",\n    value: function postViewInit(enteringView, leavingView, ti) {\n      assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n      assert(ti.resolve, 'resolve must be valid');\n      assert(ti.reject, 'reject must be valid');\n      var opts = ti.opts;\n      var insertViews = ti.insertViews;\n      var removeStart = ti.removeStart;\n      var removeCount = ti.removeCount;\n      var destroyQueue; // there are views to remove\n\n      if (removeStart !== undefined && removeCount !== undefined) {\n        assert(removeStart >= 0, 'removeStart can not be negative');\n        assert(removeCount >= 0, 'removeCount can not be negative');\n        destroyQueue = [];\n\n        for (var i = 0; i < removeCount; i++) {\n          var view = this.views[i + removeStart];\n\n          if (view && view !== enteringView && view !== leavingView) {\n            destroyQueue.push(view);\n          }\n        } // default the direction to \"back\"\n\n\n        opts.direction = opts.direction || 'back';\n      }\n\n      var finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);\n      assert(finalBalance >= 0, 'final balance can not be negative');\n\n      if (finalBalance === 0) {\n        console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n        throw new Error('navigation stack needs at least one root page');\n      } // At this point the transition can not be rejected, any throw should be an error\n      // there are views to insert\n\n\n      if (insertViews) {\n        // add the views to the\n        var insertIndex = ti.insertStart;\n\n        var _iterator3 = _createForOfIteratorHelper(insertViews),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _view = _step3.value;\n            this.insertViewAt(_view, insertIndex);\n            insertIndex++;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        if (ti.enteringRequiresTransition) {\n          // default to forward if not already set\n          opts.direction = opts.direction || 'forward';\n        }\n      } // if the views to be removed are in the beginning or middle\n      // and there is not a view that needs to visually transition out\n      // then just destroy them and don't transition anything\n      // batch all of lifecycles together\n      // let's make sure, callbacks are zoned\n\n\n      if (destroyQueue && destroyQueue.length > 0) {\n        var _iterator4 = _createForOfIteratorHelper(destroyQueue),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _view2 = _step4.value;\n            lifecycle(_view2.element, LIFECYCLE_WILL_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_DID_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_WILL_UNLOAD);\n          } // once all lifecycle events has been delivered, we can safely detroy the views\n\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var _iterator5 = _createForOfIteratorHelper(destroyQueue),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _view3 = _step5.value;\n            this.destroyView(_view3);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"transition\",\n    value: function () {\n      var _transition2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(enteringView, leavingView, ti) {\n        var _this = this;\n\n        var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield$_transition, hasCompleted;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                // we should animate (duration > 0) if the pushed page is not the first one (startup)\n                // or if it is a portal (modal, actionsheet, etc.)\n                opts = ti.opts;\n                progressCallback = opts.progressAnimation ? function (ani) {\n                  return _this.sbAni = ani;\n                } : undefined;\n                mode = getIonMode(this);\n                enteringEl = enteringView.element;\n                leavingEl = leavingView && leavingView.element;\n                animationOpts = Object.assign({\n                  mode: mode,\n                  showGoBack: this.canGoBackSync(enteringView),\n                  baseEl: this.el,\n                  animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'),\n                  progressCallback: progressCallback,\n                  animated: this.animated && config.getBoolean('animated', true),\n                  enteringEl: enteringEl,\n                  leavingEl: leavingEl\n                }, opts);\n                _context7.next = 8;\n                return _transition(animationOpts);\n\n              case 8:\n                _yield$_transition = _context7.sent;\n                hasCompleted = _yield$_transition.hasCompleted;\n                return _context7.abrupt(\"return\", this.transitionFinish(hasCompleted, enteringView, leavingView, opts));\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function transition(_x5, _x6, _x7) {\n        return _transition2.apply(this, arguments);\n      }\n\n      return transition;\n    }()\n  }, {\n    key: \"transitionFinish\",\n    value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n      var cleanupView = hasCompleted ? enteringView : leavingView;\n\n      if (cleanupView) {\n        this.cleanup(cleanupView);\n      }\n\n      return {\n        hasCompleted: hasCompleted,\n        requiresTransition: true,\n        enteringView: enteringView,\n        leavingView: leavingView,\n        direction: opts.direction\n      };\n    }\n  }, {\n    key: \"insertViewAt\",\n    value: function insertViewAt(view, index) {\n      var views = this.views;\n      var existingIndex = views.indexOf(view);\n\n      if (existingIndex > -1) {\n        // this view is already in the stack!!\n        // move it to its new location\n        assert(view.nav === this, 'view is not part of the nav');\n        views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n      } else {\n        assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n        // create the new entering view\n\n        view.nav = this; // insert the entering view into the correct index in the stack\n\n        views.splice(index, 0, view);\n      }\n    }\n  }, {\n    key: \"removeView\",\n    value: function removeView(view) {\n      assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n      var views = this.views;\n      var index = views.indexOf(view);\n      assert(index > -1, 'view must be part of the stack');\n\n      if (index >= 0) {\n        views.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroyView\",\n    value: function destroyView(view) {\n      view._destroy();\n\n      this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(activeView) {\n      // ok, cleanup time!! Destroy all of the views that are\n      // INACTIVE and come after the active view\n      // only do this if the views exist, though\n      if (this.destroyed) {\n        return;\n      }\n\n      var views = this.views;\n      var activeViewIndex = views.indexOf(activeView);\n\n      for (var i = views.length - 1; i >= 0; i--) {\n        var view = views[i];\n        /**\n         * When inserting multiple views via insertPages\n         * the last page will be transitioned to, but the\n         * others will not be. As a result, a DOM element\n         * will only be created for the last page inserted.\n         * As a result, it is possible to have views in the\n         * stack that do not have `view.element` yet.\n         */\n\n        var element = view.element;\n\n        if (element) {\n          if (i > activeViewIndex) {\n            // this view comes after the active view\n            // let's unload it\n            lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n            this.destroyView(view);\n          } else if (i < activeViewIndex) {\n            // this view comes before the active view\n            // and it is not a portal then ensure it is hidden\n            setPageHidden(element, true);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.queueTrns({\n        removeStart: -1,\n        removeCount: 1,\n        opts: {\n          direction: 'back',\n          progressAnimation: true\n        }\n      }, undefined);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(stepValue) {\n      if (this.sbAni) {\n        this.sbAni.progressStep(stepValue);\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(shouldComplete, stepValue, dur) {\n      var _this2 = this;\n\n      if (this.sbAni) {\n        this.animationEnabled = false;\n        this.sbAni.onFinish(function () {\n          _this2.animationEnabled = true;\n        }, {\n          oneTimeCallback: true\n        }); // Account for rounding errors in JS\n\n        var newStepValue = shouldComplete ? -0.001 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n\n        if (!shouldComplete) {\n          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n        } else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n        }\n\n        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(\"slot\", null);\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    }\n  }]);\n\n  return Nav;\n}();\n\nNav.style = navCss;\n\nvar navLink = function navLink(el, routerDirection, component, componentProps, routerAnimation) {\n  var nav = el.closest('ion-nav');\n\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n\n  return Promise.resolve(false);\n};\n\nvar NavLink = /*#__PURE__*/function () {\n  function NavLink(hostRef) {\n    var _this3 = this;\n\n    _classCallCheck(this, NavLink);\n\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = function () {\n      return navLink(_this3.el, _this3.routerDirection, _this3.component, _this3.componentProps, _this3.routerAnimation);\n    };\n  }\n\n  _createClass(NavLink, [{\n    key: \"render\",\n    value: function render() {\n      return h(Host, {\n        onClick: this.onClick\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return NavLink;\n}();\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":{"version":3,"sources":["C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":["r","registerInstance","e","createEvent","h","i","getElement","H","Host","b","getIonMode","c","config","assert","l","lifecycle","t","transition","s","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","g","getTimeGivenProgression","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","container","element","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","hostRef","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","assign","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","success","failed","viewsLength","viewControllers","removeEnd","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","style","navLink","routerDirection","routerAnimation","pop","NavLink","onClick","ion_nav","ion_nav_link"],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-44bf8136.js';\nimport { b as getIonMode, c as config } from './ionic-global-837be8f3.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-37b50f53.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('component' in page) {\n            /**\n             * TODO Ionic 6:\n             * Consider switching to just using `undefined` here\n             * as well as on the public interfaces and on\n             * `NavComponentWithProps`. Previously `pages` was\n             * of type `any[]` so TypeScript did not catch this.\n             */\n            return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-0a6a44c8.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ component, componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ component, componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ component, componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction, animation) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    async queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        /**\n         * If using router, check to see if navigation hooks\n         * will allow us to perform this transition. This\n         * is required in order for hooks to work with\n         * the ion-back-button or swipe to go back.\n         */\n        if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const canTransition = await router.canTransition();\n                if (canTransition === false) {\n                    return Promise.resolve(false);\n                }\n                else if (typeof canTransition === 'string') {\n                    router.push(canTransition, ti.opts.direction || 'back');\n                    return Promise.resolve(false);\n                }\n            }\n        }\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            if (requiresTransition && ti.opts && leavingView) {\n                const isBackDirection = ti.opts.direction === 'back';\n                /**\n                 * If heading back, use the entering page's animation\n                 * unless otherwise specified by the developer.\n                 */\n                if (isBackDirection) {\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n                }\n                leavingView.animationBuilder = ti.opts.animationBuilder;\n            }\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            /**\n             * When inserting multiple views via insertPages\n             * the last page will be transitioned to, but the\n             * others will not be. As a result, a DOM element\n             * will only be created for the last page inserted.\n             * As a result, it is possible to have views in the\n             * stack that do not have `view.element` yet.\n             */\n            const element = view.element;\n            if (element) {\n                if (i > activeViewIndex) {\n                    // this view comes after the active view\n                    // let's unload it\n                    lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                    this.destroyView(view);\n                }\n                else if (i < activeViewIndex) {\n                    // this view comes before the active view\n                    // and it is not a portal then ensure it is hidden\n                    setPageHidden(element, true);\n                }\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]},"metadata":{},"sourceType":"module"}