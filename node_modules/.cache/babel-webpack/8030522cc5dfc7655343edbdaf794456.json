{"ast":null,"code":"var HapticEngine = {\n  getEngine: function getEngine() {\n    var win = window;\n    return win.TapticEngine || win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics;\n  },\n  available: function available() {\n    return !!this.getEngine();\n  },\n  isCordova: function isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor: function isCapacitor() {\n    var win = window;\n    return !!win.Capacitor;\n  },\n  impact: function impact(options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style: style\n    });\n  },\n  notification: function notification(options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style: style\n    });\n  },\n  selection: function selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n  selectionStart: function selectionStart() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged: function selectionChanged() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd: function selectionEnd() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\nvar hapticSelection = function hapticSelection() {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nvar hapticSelectionStart = function hapticSelectionStart() {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nvar hapticSelectionChanged = function hapticSelectionChanged() {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nvar hapticSelectionEnd = function hapticSelectionEnd() {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\n\n\nvar hapticImpact = function hapticImpact(options) {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":{"version":3,"sources":["C:/dP-It/app/ionic/apps/ionic4-push/node_modules/@ionic/core/dist/esm/haptic-7b8ba70a.js"],"names":["HapticEngine","getEngine","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","isCordova","isCapacitor","impact","options","engine","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","a","b","c","d","h"],"mappings":"AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,SADiB,uBACL;AACR,QAAMC,GAAG,GAAGC,MAAZ;AACA,WAAQD,GAAG,CAACE,YAAL,IAAuBF,GAAG,CAACG,SAAJ,IAAiBH,GAAG,CAACG,SAAJ,CAAcC,iBAAd,CAAgC,SAAhC,CAAjB,IAA+DJ,GAAG,CAACG,SAAJ,CAAcE,OAAd,CAAsBC,OAAnH;AACH,GAJgB;AAKjBC,EAAAA,SALiB,uBAKL;AACR,WAAO,CAAC,CAAC,KAAKR,SAAL,EAAT;AACH,GAPgB;AAQjBS,EAAAA,SARiB,uBAQL;AACR,WAAO,CAAC,CAACP,MAAM,CAACC,YAAhB;AACH,GAVgB;AAWjBO,EAAAA,WAXiB,yBAWH;AACV,QAAMT,GAAG,GAAGC,MAAZ;AACA,WAAO,CAAC,CAACD,GAAG,CAACG,SAAb;AACH,GAdgB;AAejBO,EAAAA,MAfiB,kBAeVC,OAfU,EAeD;AACZ,QAAMC,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACT;AACH;;AACD,QAAMC,KAAK,GAAG,KAAKJ,WAAL,KAAqBE,OAAO,CAACE,KAAR,CAAcC,WAAd,EAArB,GAAmDH,OAAO,CAACE,KAAzE;AACAD,IAAAA,MAAM,CAACF,MAAP,CAAc;AAAEG,MAAAA,KAAK,EAALA;AAAF,KAAd;AACH,GAtBgB;AAuBjBE,EAAAA,YAvBiB,wBAuBJJ,OAvBI,EAuBK;AAClB,QAAMC,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACT;AACH;;AACD,QAAMC,KAAK,GAAG,KAAKJ,WAAL,KAAqBE,OAAO,CAACE,KAAR,CAAcC,WAAd,EAArB,GAAmDH,OAAO,CAACE,KAAzE;AACAD,IAAAA,MAAM,CAACG,YAAP,CAAoB;AAAEF,MAAAA,KAAK,EAALA;AAAF,KAApB;AACH,GA9BgB;AA+BjBG,EAAAA,SA/BiB,uBA+BL;AACR,SAAKN,MAAL,CAAY;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAZ;AACH,GAjCgB;AAkCjBI,EAAAA,cAlCiB,4BAkCA;AACb,QAAML,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACT;AACH;;AACD,QAAI,KAAKH,WAAL,EAAJ,EAAwB;AACpBG,MAAAA,MAAM,CAACK,cAAP;AACH,KAFD,MAGK;AACDL,MAAAA,MAAM,CAACM,qBAAP;AACH;AACJ,GA7CgB;AA8CjBC,EAAAA,gBA9CiB,8BA8CE;AACf,QAAMP,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACT;AACH;;AACD,QAAI,KAAKH,WAAL,EAAJ,EAAwB;AACpBG,MAAAA,MAAM,CAACO,gBAAP;AACH,KAFD,MAGK;AACDP,MAAAA,MAAM,CAACQ,uBAAP;AACH;AACJ,GAzDgB;AA0DjBC,EAAAA,YA1DiB,0BA0DF;AACX,QAAMT,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACT;AACH;;AACD,QAAI,KAAKH,WAAL,EAAJ,EAAwB;AACpBG,MAAAA,MAAM,CAACS,YAAP;AACH,KAFD,MAGK;AACDT,MAAAA,MAAM,CAACU,mBAAP;AACH;AACJ;AArEgB,CAArB;AAuEA;;;;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BzB,EAAAA,YAAY,CAACkB,SAAb;AACH,CAFD;AAGA;;;;;AAGA,IAAMQ,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B1B,EAAAA,YAAY,CAACmB,cAAb;AACH,CAFD;AAGA;;;;;AAGA,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACjC3B,EAAAA,YAAY,CAACqB,gBAAb;AACH,CAFD;AAGA;;;;;;AAIA,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B5B,EAAAA,YAAY,CAACuB,YAAb;AACH,CAFD;AAGA;;;;;;AAIA,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAAChB,OAAD,EAAa;AAC9Bb,EAAAA,YAAY,CAACY,MAAb,CAAoBC,OAApB;AACH,CAFD;;AAIA,SAASa,oBAAoB,IAAII,CAAjC,EAAoCH,sBAAsB,IAAII,CAA9D,EAAiEN,eAAe,IAAIO,CAApF,EAAuFH,YAAY,IAAII,CAAvG,EAA0GL,kBAAkB,IAAIM,CAAhI","sourcesContent":["const HapticEngine = {\n    getEngine() {\n        const win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available() {\n        return !!this.getEngine();\n    },\n    isCordova() {\n        return !!window.TapticEngine;\n    },\n    isCapacitor() {\n        const win = window;\n        return !!win.Capacitor;\n    },\n    impact(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style });\n    },\n    notification(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style });\n    },\n    selection() {\n        this.impact({ style: 'light' });\n    },\n    selectionStart() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionEnd();\n        }\n        else {\n            engine.gestureSelectionEnd();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n    HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n"]},"metadata":{},"sourceType":"module"}